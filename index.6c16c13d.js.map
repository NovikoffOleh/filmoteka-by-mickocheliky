{"mappings":"AAGA,MAAMA,EAAa,CACjB,CAAEC,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,aAChB,CAAED,GAAI,GAAIC,KAAM,aAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,SAChB,CAAED,GAAI,GAAIC,KAAM,eAChB,CAAED,GAAI,GAAIC,KAAM,SAChB,CAAED,GAAI,MAAOC,KAAM,UACnB,CAAED,GAAI,GAAIC,KAAM,WAChB,CAAED,GAAI,GAAIC,KAAM,WAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,MAAOC,KAAM,SACnB,CAAED,GAAI,KAAMC,KAAM,WAClB,CAAED,GAAI,MAAOC,KAAM,WACnB,CAAED,GAAI,IAAKC,KAAM,mBACjB,CAAED,GAAI,MAAOC,KAAM,YACnB,CAAED,GAAI,GAAIC,KAAM,YAChB,CAAED,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,GAAIC,KAAM,YAGZC,EAAcC,SAASC,cAAc,cAGrCC,EAAyB,IC3BhB,MAKbC,4BAEE,OAAOC,MAAM,iGAA2EC,KAAKC,QAC5FC,MAAKC,GAAYA,EAASC,Q,CAGzBH,WACF,OAAOD,KAAKK,W,CAGVJ,SAAKK,GACPN,KAAKK,YAAeC,C,CAftBC,cACEP,KAAKK,YAAe,C,ID8BwCG,eAA3BC,EAAU,GAC7CZ,EAAuBI,KAAOQ,EAC9B,MAAMC,QAAqBb,EAAuBC,4BAA4BI,MAAKS,GAC1EA,IAETjB,EAAYkB,UAAY,GAK4C,SAA7CC,GACvB,MAAMC,EAAkBD,EAAME,KAAI,EAACvB,GAACA,EAAEwB,YAAEA,EAAWC,MAAEA,EAAKC,UAAEA,EAASC,aAAEA,MACrE,MAAMC,EAAW,4CAA4CJ,KACvDK,EAmCV,SAAgCC,GAC9B,MAAMC,EAAuB,GAE7B,IAAK,MAAMC,KAAYF,EACrB/B,EAAWwB,KAAIM,IACTG,IAAaH,EAAM7B,IACrB+B,EAAqBE,KAAKJ,EAAM5B,KAAK,IAK3C,OAAO8B,C,CA9CSG,CAAuBR,GACrC,OAAqB,IAAjBG,EAAMM,OACD,6BAA6BnC,8CACF4B,WAAkBH,2CAElDA,0CACuBI,EAAM,QAAQF,EAAaS,MAAM,EAAG,+BAI3DP,EAAMM,OAAS,GAAKN,EAAMM,OAAS,EAC9B,6BAA6BnC,8CACF4B,WAAkBH,2CAElDA,0CACuBI,EAAM,OAAOA,EAAM,QAAQF,EAAaS,MAAM,EAAG,+BAIxEP,EAAMM,OAAS,EACV,6BAA6BnC,8CACF4B,WAAkBH,2CAElDA,0CACuBI,EAAM,OAAOA,EAAM,eAAeF,EAAaS,MAAM,EAAG,oCALnF,CAOI,IAIHC,KAAK,IACRnC,EAAYoC,mBAAmB,YAAahB,E,CArC5CiB,CAAgBrB,EAAasB,Q,CAV/BC","sources":["src/popularMovies.js","src/fetch_api.js"],"sourcesContent":["import PopularMovieFromServer from './fetch_api';\n// import Info from './infoAboutGenres';\n\nconst genresInfo = [\n  { id: 28, name: 'Action' },\n  { id: 12, name: 'Adventure' },\n  { id: 16, name: 'Animation' },\n  { id: 35, name: 'Comedy' },\n  { id: 80, name: 'Crime' },\n  { id: 99, name: 'Documentary' },\n  { id: 18, name: 'Drama' },\n  { id: 10751, name: 'Family' },\n  { id: 14, name: 'Fantasy' },\n  { id: 36, name: 'History' },\n  { id: 27, name: 'Horror' },\n  { id: 10402, name: 'Music' },\n  { id: 9648, name: 'Mystery' },\n  { id: 10749, name: 'Romance' },\n  { id: 878, name: 'Science Fiction' },\n  { id: 10770, name: 'TV Movie' },\n  { id: 53, name: 'Thriller' },\n  { id: 10752, name: 'War' },\n  { id: 37, name: 'Western' },\n];\n\nconst mainListRef = document.querySelector('.film-list')\n\n\nconst popularMovieFromServer = new PopularMovieFromServer;\n\naddPopularMovieToPage();\n\n// Функция ожидает номер страницы, делает запрос на сервер и рендерит разметку\nasync function addPopularMovieToPage(newPage = 1) {\n  popularMovieFromServer.page = newPage;\n  const popularMovie = await popularMovieFromServer.getPopularMovieFromServer().then(data => {\n    return data;\n  });\n  mainListRef.innerHTML = '';\n\n  addMurkupOnPage(popularMovie.results)\n}\n// Функция ожидает массив объектов и рендерит разметку карточек фильмов на страницу\nfunction addMurkupOnPage(array) {\n  const murkupFromArray = array.map(({id, poster_path, title, genre_ids, release_date}) => {\n    const imageUrl = `src=\"https://www.themoviedb.org/t/p/w500/${poster_path}\"`;\n    const genre = getGenreArrayForOnCard(genre_ids);\n    if (genre.length === 1) {\n      return `<li class=\"film-item\" id=\"${id}\">\n    <img width=\"280\" class=\"film-img\" ${imageUrl}\" alt=\"${title}\" />\n    <p class=\"film-name\">\n      ${title} <br />\n      <span class=\"film-tag\">${genre[0]} | ${release_date.slice(0, 4)}</span>\n    </p>\n  </li>`\n    }\n    if (genre.length > 1 && genre.length < 3) {\n      return `<li class=\"film-item\" id=\"${id}\">\n    <img width=\"280\" class=\"film-img\" ${imageUrl}\" alt=\"${title}\" />\n    <p class=\"film-name\">\n      ${title} <br />\n      <span class=\"film-tag\">${genre[0]}, ${genre[1]} | ${release_date.slice(0, 4)}</span>\n    </p>\n  </li>`\n    }\n    if (genre.length > 2) {\n      return `<li class=\"film-item\" id=\"${id}\">\n    <img width=\"280\" class=\"film-img\" ${imageUrl}\" alt=\"${title}\" />\n    <p class=\"film-name\">\n      ${title} <br />\n      <span class=\"film-tag\">${genre[0]}, ${genre[1]}, Other | ${release_date.slice(0, 4)}</span>\n    </p>\n  </li>`\n    }\n    // console.log(poster_path)\n    \n  }).join('');\n  mainListRef.insertAdjacentHTML('beforeend', murkupFromArray)\n}\n\n// Функция ожидает массив id в виде чисел и возвращает массив жанров для конкретного фильма\nfunction getGenreArrayForOnCard(genresIds) {\n  const genresArrayForOnCard = [];\n  \n  for (const genresId of genresIds) {\n    genresInfo.map(genre => {\n      if (genresId === genre.id) {\n        genresArrayForOnCard.push(genre.name);\n      }\n    })\n  }\n  \n  return genresArrayForOnCard;\n}","\nexport default class PopularMovieFromServer {\n  constructor () {\n    this.currentPage  = 1;\n  }\n\n  getPopularMovieFromServer() {\n    const API_KEY = '197007a676a4d3e84c6bdb6f21b18a1a';\n    return fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&page=${this.page}`)\n    .then(response => response.json())\n  }\n\n  get page() {\n    return this.currentPage ;\n  }\n\n  set page(pageNumber) {\n    this.currentPage  = pageNumber;\n  }\n}\n"],"names":["$d1a82dc0dd3e21bb$var$genresInfo","id","name","$d1a82dc0dd3e21bb$var$mainListRef","document","querySelector","$d1a82dc0dd3e21bb$var$popularMovieFromServer","getPopularMovieFromServer","fetch","this","page","then","response","json","currentPage","pageNumber","constructor","async","newPage","popularMovie","data","innerHTML","array","murkupFromArray","map","poster_path","title","genre_ids","release_date","imageUrl","genre","genresIds","genresArrayForOnCard","genresId","push","$d1a82dc0dd3e21bb$var$getGenreArrayForOnCard","length","slice","join","insertAdjacentHTML","$d1a82dc0dd3e21bb$var$addMurkupOnPage","results","$d1a82dc0dd3e21bb$var$addPopularMovieToPage"],"version":3,"file":"index.6c16c13d.js.map"}